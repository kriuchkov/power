// Code generated by mockery v2.46.0. DO NOT EDIT.

package client_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSolverHash is an autogenerated mock type for the SolverHash type
type MockSolverHash struct {
	mock.Mock
}

type MockSolverHash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSolverHash) EXPECT() *MockSolverHash_Expecter {
	return &MockSolverHash_Expecter{mock: &_m.Mock}
}

// FindNonce provides a mock function with given fields: ctx, hash, byteIndex, byteValue
func (_m *MockSolverHash) FindNonce(ctx context.Context, hash []byte, byteIndex int, byteValue byte) int {
	ret := _m.Called(ctx, hash, byteIndex, byteValue)

	if len(ret) == 0 {
		panic("no return value specified for FindNonce")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, []byte, int, byte) int); ok {
		r0 = rf(ctx, hash, byteIndex, byteValue)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockSolverHash_FindNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNonce'
type MockSolverHash_FindNonce_Call struct {
	*mock.Call
}

// FindNonce is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
//   - byteIndex int
//   - byteValue byte
func (_e *MockSolverHash_Expecter) FindNonce(ctx interface{}, hash interface{}, byteIndex interface{}, byteValue interface{}) *MockSolverHash_FindNonce_Call {
	return &MockSolverHash_FindNonce_Call{Call: _e.mock.On("FindNonce", ctx, hash, byteIndex, byteValue)}
}

func (_c *MockSolverHash_FindNonce_Call) Run(run func(ctx context.Context, hash []byte, byteIndex int, byteValue byte)) *MockSolverHash_FindNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(int), args[3].(byte))
	})
	return _c
}

func (_c *MockSolverHash_FindNonce_Call) Return(_a0 int) *MockSolverHash_FindNonce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSolverHash_FindNonce_Call) RunAndReturn(run func(context.Context, []byte, int, byte) int) *MockSolverHash_FindNonce_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSolverHash creates a new instance of MockSolverHash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSolverHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSolverHash {
	mock := &MockSolverHash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
