// Code generated by mockery v2.46.0. DO NOT EDIT.

package server_mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockPowHandler is an autogenerated mock type for the PowHandler type
type MockPowHandler struct {
	mock.Mock
}

type MockPowHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPowHandler) EXPECT() *MockPowHandler_Expecter {
	return &MockPowHandler_Expecter{mock: &_m.Mock}
}

// GenerateHash provides a mock function with given fields: msg, nonce
func (_m *MockPowHandler) GenerateHash(msg []byte, nonce int) []byte {
	ret := _m.Called(msg, nonce)

	if len(ret) == 0 {
		panic("no return value specified for GenerateHash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, int) []byte); ok {
		r0 = rf(msg, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockPowHandler_GenerateHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateHash'
type MockPowHandler_GenerateHash_Call struct {
	*mock.Call
}

// GenerateHash is a helper method to define mock.On call
//   - msg []byte
//   - nonce int
func (_e *MockPowHandler_Expecter) GenerateHash(msg interface{}, nonce interface{}) *MockPowHandler_GenerateHash_Call {
	return &MockPowHandler_GenerateHash_Call{Call: _e.mock.On("GenerateHash", msg, nonce)}
}

func (_c *MockPowHandler_GenerateHash_Call) Run(run func(msg []byte, nonce int)) *MockPowHandler_GenerateHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int))
	})
	return _c
}

func (_c *MockPowHandler_GenerateHash_Call) Return(_a0 []byte) *MockPowHandler_GenerateHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPowHandler_GenerateHash_Call) RunAndReturn(run func([]byte, int) []byte) *MockPowHandler_GenerateHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientConditions provides a mock function with given fields: clientAddr
func (_m *MockPowHandler) GetClientConditions(clientAddr net.Addr) (int, byte) {
	ret := _m.Called(clientAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetClientConditions")
	}

	var r0 int
	var r1 byte
	if rf, ok := ret.Get(0).(func(net.Addr) (int, byte)); ok {
		return rf(clientAddr)
	}
	if rf, ok := ret.Get(0).(func(net.Addr) int); ok {
		r0 = rf(clientAddr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(net.Addr) byte); ok {
		r1 = rf(clientAddr)
	} else {
		r1 = ret.Get(1).(byte)
	}

	return r0, r1
}

// MockPowHandler_GetClientConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientConditions'
type MockPowHandler_GetClientConditions_Call struct {
	*mock.Call
}

// GetClientConditions is a helper method to define mock.On call
//   - clientAddr net.Addr
func (_e *MockPowHandler_Expecter) GetClientConditions(clientAddr interface{}) *MockPowHandler_GetClientConditions_Call {
	return &MockPowHandler_GetClientConditions_Call{Call: _e.mock.On("GetClientConditions", clientAddr)}
}

func (_c *MockPowHandler_GetClientConditions_Call) Run(run func(clientAddr net.Addr)) *MockPowHandler_GetClientConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Addr))
	})
	return _c
}

func (_c *MockPowHandler_GetClientConditions_Call) Return(byteIndex int, byteValue byte) *MockPowHandler_GetClientConditions_Call {
	_c.Call.Return(byteIndex, byteValue)
	return _c
}

func (_c *MockPowHandler_GetClientConditions_Call) RunAndReturn(run func(net.Addr) (int, byte)) *MockPowHandler_GetClientConditions_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidHash provides a mock function with given fields: hash, byteIndex, byteValue
func (_m *MockPowHandler) IsValidHash(hash []byte, byteIndex int, byteValue byte) bool {
	ret := _m.Called(hash, byteIndex, byteValue)

	if len(ret) == 0 {
		panic("no return value specified for IsValidHash")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, int, byte) bool); ok {
		r0 = rf(hash, byteIndex, byteValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPowHandler_IsValidHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidHash'
type MockPowHandler_IsValidHash_Call struct {
	*mock.Call
}

// IsValidHash is a helper method to define mock.On call
//   - hash []byte
//   - byteIndex int
//   - byteValue byte
func (_e *MockPowHandler_Expecter) IsValidHash(hash interface{}, byteIndex interface{}, byteValue interface{}) *MockPowHandler_IsValidHash_Call {
	return &MockPowHandler_IsValidHash_Call{Call: _e.mock.On("IsValidHash", hash, byteIndex, byteValue)}
}

func (_c *MockPowHandler_IsValidHash_Call) Run(run func(hash []byte, byteIndex int, byteValue byte)) *MockPowHandler_IsValidHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int), args[2].(byte))
	})
	return _c
}

func (_c *MockPowHandler_IsValidHash_Call) Return(_a0 bool) *MockPowHandler_IsValidHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPowHandler_IsValidHash_Call) RunAndReturn(run func([]byte, int, byte) bool) *MockPowHandler_IsValidHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPowHandler creates a new instance of MockPowHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPowHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPowHandler {
	mock := &MockPowHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
